import asyncio
import psycopg2
import os
import logging
from datetime import datetime
from .auth_check import check_auth
from .config import TZ, LIMIT, DB_CONFIG, TG_SESSION_PATH
from .tg_utils import (
    get_or_create_channel,
    fetch_messages,
    save_batch_to_db,
    save_single_to_db,
)
from telethon import events
from telethon.tl.types import User, Channel
from .analyze.msg_process import get_last_msg, get_all_msg, analyze_all_db_msg
from .logging_config import setup_logging

setup_logging()
logger = logging.getLogger(__name__)


async def setup_channels(client, conn, channels_input):
    """Setup channels for parsing and return a list of (channel, channel_id) tuples."""
    channels_to_parse = []
    for channel in [c.strip() for c in channels_input.split(",") if c.strip()]:
        try:
            entity = await client.get_entity(channel)
            channel_id = get_or_create_channel(conn, channel, entity.title)
            channels_to_parse.append((channel, channel_id))
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª {channel}: {e}")
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª {channel}: {e}")
    return channels_to_parse


async def run_parser(client, channels_to_parse, limit):
    """Run the parser for historical messages."""
    for channel, channel_id in channels_to_parse:
        print(f"‚è≥ –ü–∞—Ä—Å–∏–º {limit} –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel}...")
        messages = await fetch_messages(client, channel, channel_id, limit)
        if messages:
            save_batch_to_db(messages, channel)
        print(
            f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel}"
        )


async def subscribe_to_channels(client, channels_to_parse):
    """Subscribe to new messages from channels."""
    entities = []
    for channel, channel_id in channels_to_parse:
        try:
            entity = await client.get_entity(channel)
            entities.append((channel, entity, channel_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")

    for channel, entity, channel_id in entities:
        client.add_event_handler(
            lambda event: handle_new_message(event, channel, channel_id),
            events.NewMessage(chats=entity),
        )


async def handle_new_message(event, channel, channel_id):
    """Handle a new message event and save it to the database."""
    if not event.message.message or not isinstance(event.chat, Channel):
        return

    author = "Unknown"
    if event.message.sender:
        if isinstance(event.message.sender, User):
            author = (
                event.message.sender.username
                or event.message.sender.first_name
                or str(event.message.sender.id)
            )
        elif isinstance(event.message.sender, Channel):
            author = event.message.sender.title or str(event.message.sender.id)
        else:
            author = str(event.message.sender.id)

    new_message = {
        "author": author,
        "text": event.message.message,
        "date": event.message.date.astimezone(tz=TZ),
        "channel_id": channel_id,
        "message_id": event.message.id,
    }
    save_single_to_db(new_message, channel)
    last_msg = get_last_msg()
    if last_msg and isinstance(last_msg, (tuple, list)):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
        analyze_all_db_msg([last_msg])  # –ü–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_msg}")


async def main():
    """Main entry point for the Telegram parser."""
    session_file = f"{TG_SESSION_PATH}.session"
    if not os.path.exists(session_file):
        print(
            f"‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ session_saver.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."
        )
        return

    client = await check_auth()

    async with client:
        me = await client.get_me()
        print(f"üë§ –í–∞—à Telegram: {me.username or me.first_name}")

        channels_input = input(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (e.g. @binance,joe_speen_youtube): "
        )
        input_channels = [
            channel.strip() for channel in channels_input.split(",") if channel.strip()
        ]
        if not input_channels:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        with psycopg2.connect(**DB_CONFIG) as conn:
            try:
                channels_to_parse = await setup_channels(client, conn, channels_input)
                if not channels_to_parse:
                    print("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")
                    return

                limit = (
                    input(
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ –∫–∞–Ω–∞–ª ({LIMIT} –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): "
                    )
                    or LIMIT
                )
                limit = int(limit)

                await run_parser(client, channels_to_parse, limit)
                messages = get_all_msg()
                if messages:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                    analyze_all_db_msg(messages)
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞.")

                await subscribe_to_channels(client, channels_to_parse)
                print(
                    f"üîî –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö: {', '.join(c[0] for c in channels_to_parse)}..."
                )
                await client.run_until_disconnected()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
