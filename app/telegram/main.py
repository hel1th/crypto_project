import asyncio
import psycopg2
import os
import logging
from auth_check import check_auth
from config import (
    TZ,
    LIMIT,
    DB_CONFIG,
    TG_SESSION_PATH,
)
from telethon.errors import ChannelInvalidError, ChannelPrivateError
from telethon import events
from telethon.tl.types import User, Channel


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("telegram.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


logging.getLogger("telethon").setLevel(logging.INFO)


async def fetch_messages(client, channel_username: str, limit: int = LIMIT) -> list:
    try:
        entity = await client.get_entity(channel_username)
        messages = []
        async for msg in client.iter_messages(entity, limit=limit):
            if not msg.message:
                continue
            author = None
            if msg.sender:
                if isinstance(msg.sender, User):
                    author = msg.sender.username or msg.sender.first_name or None
                elif isinstance(msg.sender, Channel):
                    author = msg.sender.title or None
            messages.append(
                {
                    "channel_id": str(entity.id),
                    "text": msg.message,
                    "date": msg.date.astimezone(tz=TZ).strftime("%Y-%m-%d %H:%M:%S"),
                    "author": author,
                    "message_id": msg.id,
                }
            )
        return messages
    except ChannelPrivateError:
        print(f"‚ùå –ö–∞–Ω–∞–ª {channel_username} —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º.")
        return []
    except ChannelInvalidError:
        print(f"‚ùå –ö–∞–Ω–∞–ª {channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel_username}: {e}")
        return []


def save_batch_to_db(messages, channel):
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        query = f"""
            INSERT INTO {TABLE} (channel_id, text, date, author, message_id)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (channel_id, message_id) DO NOTHING
        """
        data = [
            (
                msg["channel_id"],
                msg["text"],
                msg["date"],
                msg["author"],
                msg["message_id"],
            )
            for msg in messages
        ]
        cur.executemany(query, data)
        conn.commit()
        if cur.rowcount < len(messages):
            print(f"‚ö†Ô∏è –ß–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel} –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç—ã?).")
        else:
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {cur.rowcount} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î (–∫–∞–Ω–∞–ª {channel}): {e}")
    finally:
        cur.close()
        conn.close()


def save_single_to_db(msg, channel):
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        query = """
            INSERT INTO tg_messages (author, text, date, channel_id, message_id)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (channel_id, message_id) DO NOTHING
        """
        data = (
            msg["author"],
            msg["text"],
            msg["date"],
            msg["channel_id"],
            msg["message_id"],
        )
        cur.execute(query, data)
        conn.commit()
        if cur.rowcount > 0:
            print(f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–∫–∞–Ω–∞–ª: {channel})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
    finally:
        cur.close()
        conn.close()


async def main():
    session_file = f"{TG_SESSION_PATH}.session"
    if not os.path.exists(session_file):
        print(
            f"‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ session_saver.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."
        )
        return

    client = await check_auth()

    async with client:
        me = await client.get_me()
        print(f"üë§ –í–∞—à Telegram: {me.username or me.first_name}")

        channels_input = input(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (e.g. @binance,joe_speen_youtube): "
        )
        channels = [
            channel.strip() for channel in channels_input.split(",") if channel.strip()
        ]
        if not channels:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        limit = input(
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ –∫–∞–Ω–∞–ª ({LIMIT} –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): "
        )
        limit = int(limit) if limit else LIMIT

        for channel in channels:
            print(f"‚è≥ –ü–∞—Ä—Å–∏–º {limit} –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel}...")
            messages = await fetch_messages(client, channel, limit)
            if messages:
                save_batch_to_db(messages, channel)
            print(
                f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel}"
            )

        try:
            entities = []
            for channel in channels:
                try:
                    entity = await client.get_entity(channel)
                    entities.append((channel, entity))
                except ChannelPrivateError:
                    print(
                        f"‚ùå –ù–µ –º–æ–≥—É –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {channel}: –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º."
                    )
                except ChannelInvalidError:
                    print(f"‚ùå –ö–∞–Ω–∞–ª {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")

            for channel, entity in entities:

                @client.on(events.NewMessage(chats=entity))
                async def handle_new_message(event, ch=channel):
                    if not event.message.message:
                        return

                    if not isinstance(event.chat, Channel):
                        return

                    author = None
                    if event.message.sender:
                        if isinstance(event.message.sender, User):
                            author = (
                                event.message.sender.username
                                or event.message.sender.first_name
                                or None
                            )
                        elif isinstance(event.message.sender, Channel):
                            author = event.message.sender.title or None

                    new_message = {
                        "author": author,
                        "text": event.message.message,
                        "date": event.message.date.astimezone(tz=TZ).strftime(
                            "%Y-%m-%d %H:%M:%S"
                        ),
                        "channel_id": str(event.chat.id),
                        "message_id": event.message.id,
                    }

                    save_single_to_db(new_message, ch)

            print(f"üîî –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö: {', '.join(channels)}...")
            await client.run_until_disconnected()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã: {e}")


if __name__ == "__main__":
    TABLE = "tg_messages"
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
