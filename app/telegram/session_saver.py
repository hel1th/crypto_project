import os
import logging
import asyncio
from telethon import TelegramClient
from config import TG_SESSION_PATH, TG_API_ID, TG_API_HASH

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("telegram.log"), logging.StreamHandler()],
)
logging.getLogger("telethon").setLevel(logging.INFO)

# –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
custom_suffix = input(
    "–í–≤–µ–¥–∏—Ç–µ —Å—É—Ñ—Ñ–∏–∫—Å —Å–µ—Å—Å–∏–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ .env, –Ω–∞–ø—Ä–∏–º–µ—Ä _vlad): "
) or os.getenv("TG_SESSION_SUFFIX", "")
if custom_suffix:
    session_name = os.path.basename(TG_SESSION_PATH).replace(
        os.getenv("TG_SESSION_SUFFIX", ""), custom_suffix
    )
    TG_SESSION_PATH = os.path.join(os.path.dirname(TG_SESSION_PATH), session_name)

client = TelegramClient(TG_SESSION_PATH, TG_API_ID, TG_API_HASH)


async def main():
    print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram —Å —Å–µ—Å—Å–∏–µ–π: {TG_SESSION_PATH}.session...")
    try:
        await client.start()
        me = await client.get_me()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.username or me.first_name}")
        print(f"üìÅ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {TG_SESSION_PATH}.session")
        await client.disconnect()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await client.disconnect()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
